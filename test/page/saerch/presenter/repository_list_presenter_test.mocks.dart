// Mocks generated by Mockito 5.4.2 from annotations
// in repository_search/test/page/saerch/presenter/repository_list_presenter_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dio/dio.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:repository_search/gateway/repository/repository_gateway.dart'
    as _i3;
import 'package:repository_search/page/search/presenter/repository.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDio_0 extends _i1.SmartFake implements _i2.Dio {
  _FakeDio_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RepositoryGateway].
///
/// See the documentation for Mockito's code generation for more information.
class MockRepositoryGateway extends _i1.Mock implements _i3.RepositoryGateway {
  MockRepositoryGateway() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Dio get dio => (super.noSuchMethod(
        Invocation.getter(#dio),
        returnValue: _FakeDio_0(
          this,
          Invocation.getter(#dio),
        ),
      ) as _i2.Dio);

  @override
  _i4.Future<(List<_i5.Repository>, int)> fetchRepository({
    required String? query,
    int? page = 1,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchRepository,
          [],
          {
            #query: query,
            #page: page,
          },
        ),
        returnValue: _i4.Future<(List<_i5.Repository>, int)>.value(
            (<_i5.Repository>[], 0)),
      ) as _i4.Future<(List<_i5.Repository>, int)>);
}
